---
title: 'login'
---

<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
</head>
<body>
  <div class="stwk">
    <h2>Sign in to your account</h2>

  <form id="submit-form" name='form-login'>
    <div>
      <span class="fontawesome-user"></span>
      <input type="text" name="userId" id="userId" placeholder="UserId" class="form" required /><br><br>
    </div>
    <div>
      <span class="fontawesome-lock"></span>
      <input type="password" name="pass" id="pass" placeholder="Password" class="form" required><br>
    </div>
    <div class="submit">
      <button id="button" class="button">Login</button>
    </div>
  </form>

  <p id="response-message" style="color: green; display: none;"></p>
  <p id="error-message" style="color: red; display: none;"></p>


  <script type="module" >

    async function handleClick(e) {
      e.preventDefault();

      const form = e.target;
      const formData = new FormData(form);
      const userId = formData.get('userId');
      const pass = formData.get('pass');


      try {
        // Hono API にデータを送信
        const response = await fetch('http://localhost:3000/login/submit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId, pass }),
        });
        const data = await response.json();
        console.log(data);
        if (data.success) {
          document.getElementById('response-message').textContent = data.message;
          document.getElementById('response-message').style.display = 'block';
          window.location.href="/";

        } else {
          document.getElementById('error-message').textContent = data.message;
          document.getElementById('error-message').style.display = 'block';
        }
      } catch (error) {
        document.getElementById('error-message').textContent = '送信に失敗しました';
        document.getElementById('error-message').style.display = 'block';
      }

    };


    // フォームの送信時に handleClick を呼び出す
    const form = document.getElementById('submit-form');
    form.onsubmit = handleClick;
  </script>
</body>
</html>

<style>
  body{
      background-color: rgb(147, 176, 188);
  }
  .stwk{
      display: flex;
      justify-content: center;
      flex-wrap: wraps;
      flex-flow: column;
      margin: 10%;
      padding: 10%;
      padding-top: 5%;
      padding-bottom: 15%;
      background-color: white;
  }
  .form{
      border: 2px solid #ccc;
      border-radius: 4px;
      border-top: none;
      border-left: none;
      border-right: none;
  }
  h2{
      padding-bottom: 2em;
  }
  .form{
      width: 100%;
      margin-bottom: 2em;

  }
  .submit{
      position: relative;
      margin-top: 2em;
      margin-bottom: 1.5em;
  }
  .button{
      position: absolute;
      right: 0;
      border: 1px solid rgb(68, 104, 117);
      border-radius: 30px;
      background-color: rgb(116, 172, 195);
      color: white;
      height: 25px;
      width: 70px;
      cursor: pointer;
  }
</style>
 